/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;

import java.util.*;

/**
 * Write program to compute height of fuzzy set and also check normal.
 * Write program to compute alpha cut of a fuzzy set.
 * Write a program to compute support, core and boundary of a fuzzy set
 *
 * Lab 2
 *
 * Implement Fuzzy Membership function and generate fuzzy sets :
 * 1. L-function
 * 2. R-function
 * 3. Triangular function
 * 4. trapezoidal function
 *
 * Lab 3
 * Write a program to create any two fuzzy sets and a
 * fuzzy relation from the fuzzy set. (Thursday).
 * Implement the relation of alpha cut.
 * 
 */
public class LibraryTest {

  @Test public void testFuzzySet() {

    HashMap<String, Fuzzy> first = new HashMap<>();
    HashMap<String, Fuzzy> second = new HashMap<>();

    first.put("a", new Fuzzy("a", 0.5));
    first.put("b", new Fuzzy("b", 0.6));
    first.put("c", new Fuzzy("c", 0.0));
    first.put("e", new Fuzzy("e", 0.2));
    //first.put("d", new Fuzzy("d", 0.3));
    //first.put("e", new Fuzzy("e", 1.0));

    second.put("a", new Fuzzy("a", 0.3));
    second.put("b", new Fuzzy("b", 0));
    second.put("c", new Fuzzy("c", 1));
    second.put("d", new Fuzzy("d", 0.2));

    if(Fuzzy.validate(first))
      System.out.println("first        = " + first.values());

    if(Fuzzy.validate(second))
      System.out.println("second       = " + second.values());

    System.out.println("\n================ RESULTS ==================\n");

    System.out.println("Intersection = " + Fuzzy.computeIntersection(first,second).values());
    System.out.println("Union        = " + Fuzzy.computeUnion(first,second).values());

    System.out.println("Complement X1 = " + Fuzzy.computeComplement(first).values());
    Fuzzy.computeHeight(first);
    Fuzzy.computeAlphaCut(first, 0.2);
    Fuzzy.computeSupport(first);
    Fuzzy.computeCore(second);
    Fuzzy.computeBoundary(second);

    assert 1 == 1;
  }

  @Test public void testMemberShip() {

    Double[] elements = {20.0, 40.0, 45.0 , 50.0, 55.0, 60.0, 65.0};
    Double alpha = 40.0;
    Double beta = 60.0;
    Double rho = 50.0;
    Double delta = 65.0;

    Membership.R_Function(elements, alpha, beta);
    Membership.L_Function(elements, alpha, beta);

    Double[] triElements = {30.0, 35.0, 40.0, 45.0 , 50.0, 55.0, 60.0, 65.0, 70.0};
    alpha = 45.0;
    beta = 50.0;

    Membership.Triangular_function(triElements, alpha, beta, rho);

    Membership.Trapezoidal_function(triElements, alpha, beta, rho ,delta);


    assert 1 == 1;
  }

  @Test public void testRelation() {
    LinkedHashMap < String , Fuzzy> first = new LinkedHashMap<>();
    LinkedHashMap < String , Fuzzy> second = new LinkedHashMap<>();

    first.put("x1", new Fuzzy("x1", 0.2));
    first.put("x2", new Fuzzy("x2", 0.5));
    first.put("x3", new Fuzzy("x3", 1.0));
    //first.put("x4", new Fuzzy("x4", 1.0));

    second.put("y1", new Fuzzy("y1", 0.3));
    second.put("y2", new Fuzzy("y2", 0.9));
    //second.put("y3", new Fuzzy("y3", 0.5));

    if(Fuzzy.validate(first))
      System.out.println("first        = " + first.values());

    if(Fuzzy.validate(second))
      System.out.println("second       = " + second.values());

    Relation.computeRelation(first, second);

  }
}
